#include "stdafx.hpp"

#include "snake_overflow/invulnerability_spell.hpp"
#include "snake_overflow/testing/cube_terrain_game_fixture.hpp"
#include "util/repeat.hpp"
#include <memory>

namespace snake_overflow { namespace testing
{

using ::testing::Contains;
using ::testing::Eq;
using ::testing::Ref;

class InvulnerabilitySpell : public CubeTerrainGameFixture
{

protected:

    virtual void SetUp() override
    {
        CubeTerrainGameFixture::SetUp();

        auto& g = get_game();

        auto i = std::make_unique<invulnerability_spell>(this->placement, 
                                                         g,
                                                         this->lifetime);

        this->spell = i.get();

        auto& ground = get_terrain();

        ground.add_item(std::move(i));
    }

protected:
    
    position placement = {{1, 0, 2}, block_face::front};

    int lifetime = 50;

    invulnerability_spell* spell;

};

TEST_THAT(InvulnerabilitySpell,
     WHAT(GetPosition),
     WHEN(Always),
     THEN(ReturnsThePositionPassedAtConstruction))
{
    EXPECT_THAT(this->spell->get_position(), Eq(this->placement));
}

TEST_THAT(InvulnerabilitySpell,
     WHAT(Pick),
     WHEN(GivenAPickingSnake),
     THEN(GivesTheSnakeInvulnerableBonus))
{
    auto& s = get_snake();

    this->spell->pick(s);
    
    EXPECT_TRUE(s.invulnerability_bonus);
}

TEST_THAT(InvulnerabilitySpell,
     WHAT(Pick),
     WHEN(Always),
     THEN(RemovesTheItemFromTheTerrain))
{
    auto& s = get_snake();

    this->spell->pick(s);

    auto& t = get_terrain();

    auto const b = t.get_block(placement.location);
    
    EXPECT_THAT(b.items.size(), Eq(0u));
}

TEST_THAT(InvulnerabilitySpell,
     WHAT(Lifetime),
     WHEN(AfterShorteningIt),
     THEN(EvaluatesToAValueLowerThanThePreviousOneUnit))
{
    this->spell->lifetime.shorten();

    EXPECT_THAT(this->spell->lifetime, Eq(this->lifetime - 1)); 
}

TEST_THAT(InvulnerabilitySpell,
     WHAT(Lifetime),
     WHEN(WhenShorteningDownToZero),
     THEN(RemovesTheDietPillFromTheTerrain))
{
    util::repeat(this->lifetime, [this] { this->spell->lifetime.shorten(); });

    auto& ground = get_terrain();

    EXPECT_THAT(ground.get_num_of_items(), Eq(0));
}

TEST_THAT(InvulnerabilitySpell,
     WHAT(Age),
     WHEN(Always),
     THEN(ShortensTheLifetime))
{
    this->spell->age();

    EXPECT_THAT(this->spell->lifetime, Eq(this->lifetime - 1)); 
}

} }